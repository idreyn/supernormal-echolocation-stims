function make_stim_set(stim_set, fs, hrirs, kemar_fs, kemar_hrirs, target_directory)
    arguments
        stim_set StimulusSet
        fs {mustBeNumeric}
        hrirs (17,360,:)
        kemar_fs {mustBeNumeric}
        kemar_hrirs (73,2,:)
        target_directory string
    end
    if exist(target_directory, "dir")
        error("Refusing to write stims to an existing directory");
    end
    mkdir(target_directory);
    ild_matched_orientation_map = get_ild_matched_orientation_map( ...
        stim_set, ...
        hrirs, ...
        kemar_fs, ...
        kemar_hrirs);
    for target_distance_cm = stim_set.target_distances_cm
        for slowdown_factor = stim_set.slowdowns
            for target_azimuth_deg = stim_set.azimuths_deg
                ultrasound_pulse = get_ultrasound_pulse_for_slowdown( ...
                    stim_set, slowdown_factor)
                kemar_stim = make_matched_kemar_stim( ...
                    kemar_hrirs, ...
                    kemar_fs, ...
                    ultrasound_pulse, ...
                    slowdown_factor, ...
                    target_distance_cm / 100, ...
                    target_azimuth_deg, ...
                    false);
                save_single_stim( ...
                    target_directory, ...
                    kemar_fs, ...
                    stim_set.fs, ...
                    kemar_stim, ...
                    "kemar", ...
                    target_distance_cm, ...
                    slowdown_factor, ...
                    "na", ...
                    "na", ...
                    target_azimuth_deg)
                for compensation_denominator = stim_set.compensation_fractions_of_slowdown_denominator
                    compensation_factor = resolve_compensation_factor( ...
                        slowdown_factor, compensation_denominator);
                    for orientation_type_idx = 1:2
                        if orientation_type_idx == 1
                            orientation_type = "normal";
                            orientation_index = 9;
                        else
                            orientation_type = "matched";
                            key = slowdown_compensation_key( ...
                                slowdown_factor, ...
                                compensation_denominator);
                            orientation_index = ild_matched_orientation_map(key);
                        end
                        stim = make_stim( ...
                            hrirs, ... 
                            fs, ...
                            ultrasound_pulse, ...
                            stim_set.hrir_included_distance_m, ...
                            target_distance_cm / 100, ...
                            target_azimuth_deg, ...
                            slowdown_factor, ...
                            compensation_factor, ...
                            orientation_index, ...
                            false);
                        save_single_stim( ...
                            target_directory, ...
                            fs, ...
                            stim_set.fs, ...
                            stim, ...
                            "spherical", ...
                            target_distance_cm, ...
                            slowdown_factor, ...
                            compensation_denominator, ...
                            orientation_type, ...
                            target_azimuth_deg)
                    end
                end
            end
        end
    end
end

function pulse = get_ultrasound_pulse_for_slowdown(stim_set, slowdown)
    arguments
        stim_set StimulusSet
        slowdown {mustBeNumeric}
    end
    pulse = Pulse( ...
        slowdown * stim_set.audible_chirp_frequency_band_hz(1), ...
        slowdown * stim_set.audible_chirp_frequency_band_hz(2), ...
        stim_set.pulse_length_s, ...
        stim_set.chirp_kind);
end

function compensation_to_orientation_index = get_ild_matched_orientation_map(stim_set, hrirs, kemar_fs, kemar_hrirs)
    arguments
        stim_set StimulusSet
        hrirs (17,360,:)
        kemar_fs {mustBeNumeric}
        kemar_hrirs (73,2,:)
    end
    kemar_ild = get_kemar_ild(kemar_fs, kemar_hrirs);
    compensation_to_orientation_index = containers.Map();
    for slowdown = stim_set.slowdowns
      for denominator = stim_set.compensation_fractions_of_slowdown_denominator
           key = slowdown_compensation_key(slowdown, denominator);
           compensation = resolve_compensation_factor(slowdown, denominator);
           ild_matched_orientation_index = get_ild_matched_orientation_for_compensation( ...
               hrirs, ...
               kemar_ild, ...
               compensation, ...
               false);
           compensation_to_orientation_index(key) = ild_matched_orientation_index;
      end
    end
end


function compensation = resolve_compensation_factor(slowdown, compensation_denominator)
    if compensation_denominator == 0
        compensation = 1;
    else
        compensation = slowdown / compensation_denominator;
    end
end

function key = slowdown_compensation_key(slowdown, compensation_denominator)
    key = strcat(string(slowdown), "-", string(compensation_denominator));
end

function save_single_stim( ...
    parent_dir, ...
    fs, ...
    target_fs, ...
    stim, ...
    model_name, ...
    target_distance_cm, ...
    slowdown, ...
    compensation_denominator, ...
    receiver_orientation, ...
    azimuth)
    arguments
        parent_dir string
        fs {mustBeNumeric}
        target_fs {mustBeNumeric}
        stim (2,:)
        model_name string
        target_distance_cm
        slowdown,
        compensation_denominator
        receiver_orientation
        azimuth = ""
    end
    if fs ~= target_fs
       stim = resample(stim', target_fs, fs)';
    end
    filename = strcat(model_name, "_", ... 
        string(target_distance_cm), "cm_", ...
        "s", string(slowdown), "_", ...
        "c", string(compensation_denominator), "_", ...
        string(receiver_orientation), "_",...
        "a", string(azimuth));
    qualified_path = strcat(parent_dir, filesep, filename, ".wav");
    audiowrite(qualified_path, stim', target_fs);
end
    
